@test
def test_list():
    v: [i32] = [3, 2, 1]
    assert v[0] == 3
    assert v[1] == 2
    assert v[2] == 1

    res = 0

    try:
        assert v[3] == 1
    except:
        res = 1

    assert res == 1

@test
def test_list_sort():
    l = [3, 2, 1]
    l.sort()
    assert l == [1, 2, 3]

    l.reverse()
    assert l == [3, 2, 1]

    a = ["foo", "bar"]
    a.sort()
    assert a == ["bar", "foo"]

    b = [[1, 3], [1, 2]]
    b.sort()
    assert b == [[1, 2], [1, 3]]

    c = [[1, 1, 2], [1, 1, 1]]
    c.sort()
    assert c == [[1, 1, 1], [1, 1, 2]]

    c = [[1, 1, 1], [1, 1, 2]]
    c.sort()
    assert c == [[1, 1, 1], [1, 1, 2]]

@test
def test_list_extend():
    d = [1, 2]
    d.extend([3, 4])
    assert d == [1, 2, 3, 4]
    d.extend([5, 6])
    assert d == [1, 2, 3, 4, 5, 6]

@test
def test_list_insert():
    d = [1, 2]
    d.insert(1, 0)
    assert d == [1, 0, 2]
    d.insert(1, 7)
    assert d == [1, 7, 0, 2]

@test
def test_list_remove():
    d = [1, 2, 3, 2]
    d.remove(2)
    assert d == [1, 3, 2]
    d.remove(3)
    assert d == [1, 2]

    try:
        raised = False
        d.remove(0)
    except ValueError as e:
        assert str(e) == "ValueError(message=\"remove argument not in list\")"
        raised = True

    assert raised

@test
def test_list_clear():
    d = [1, 2]
    d.clear()
    assert d == []

@test
def test_list_pop():
    d = [1, 2, 3]
    assert d.pop(2) == 3
    assert d == [1, 2]
    assert d.pop() == 2
    assert d == [1]
    assert d.pop(0) == 1
    assert d == []

    try:
        raised = False
        d.pop(1)
    except IndexError as e:
        assert str(e) == "IndexError(message=\"pop index out of range\")"
        raised = True

    assert raised

@test
def test_list_count():
    d = [1, 2, 3, 2]
    assert d.count(2) == 2

def foo_return_list() -> [u8]:
    return [1, 5]

@test
def test_return_list():
    values = foo_return_list()
    assert values[0] == 1
    assert values[1] == 5

@test
def test_str_list():
    assert str([1, -2, 5]) == "[1, -2, 5]"

@test
def test_compare_lists_1():
    assert [1] == [1]

    if [1] == [1]:
        pass
    else:
        assert False

    if [1] != [1]:
        assert False

    res = 0

    try:
        assert [1] == [2]
    except AssertionError:
        res = 1

    assert res == 1

@test
def test_compare_lists_2():
    res = 0

    if [1] is not [1]:
        assert False

    try:
        assert [1] is not [1]
    except AssertionError:
        res = 1

    if [1] is [2]:
        assert False

    try:
        assert [1] is [2]
    except AssertionError:
        res = 1

    assert res == 1

    assert [3] is not None

    if [3] is not None:
        pass
    else:
        assert False

@test
def test_compare_lists_3():
    values: [bool] = None
    res = 0

    try:
        if values == [True]:
            pass
    except NoneError:
        res = 1

    assert res == 1

@test
def test_add_lists():
    l1 = [1]
    l2 = [2]

    assert l1 + l2 == [1, 2]

    l1 = None
    res = 0

    try:
        if l1 + l2 == [1, 2]:
            pass
    except NoneError:
        res = 1

    assert res == 1

@test
def test_list_acces_none():
    v: [bool] = None
    res = 0

    try:
        print(v[0])
    except NoneError:
        res = 1

    assert res == 1

@test
def test_list_len_of_none():
    v: [u8] = None
    res = 0

    try:
        print(len(v))
    except NoneError:
        res = 1

    assert res == 1

@test
def test_list_str_of_none():
    v: [u8] = None

    assert str(v) == "None"

@test
def test_for_loop_modify_integer():
    values = [1, 2]

    for value in values:
        value += 1

    assert values == [1, 2]

@test
def test_for_loop_modify_string():
    values = ["1", "2"]
    result: [string] = []

    for value in values:
        value += "1"
        result.append(value)

    assert values == ["1", "2"]
    assert result == ["11", "21"]

class ForFoo:
    x: u64

@test
def test_for_loop_modify_class():
    values = [ForFoo(1), ForFoo(2)]

    for value in values:
        value.x += 1

    assert values[0].x == 2
    assert values[1].x == 3

@test
def test_for_loop_slice_modify_integer():
    values = [0, 1, 2, 3, 4]
    sliced: [i64] = []

    for value in slice(values, 1, 3):
        value += 1
        sliced.append(value)

    assert values == [0, 1, 2, 3, 4]
    assert sliced == [2, 3]

@test
def test_list_index_out_of_range():
    v = [1, 2]
    raised = False

    try:
        print(v[2])
    except IndexError as e:
        assert str(e) == "IndexError(message=\"list index out of range\")"
        raised = True

    assert raised

@test
def test_negative_list_index():
    values = [0, 2, 4, 6]

    assert values[-1] == 6
    assert values[-2] == 4
    assert values[-4] == 0

    res = 0

    try:
        print(values[-5])
    except IndexError as e:
        assert str(e) == "IndexError(message=\"list index out of range\")"
        res = 1

    assert res == 1
